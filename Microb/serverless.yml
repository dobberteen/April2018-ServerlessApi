service: microb-challenge

provider:
  name: aws
  runtime: dotnetcore2.0
  profile: ${opt:profile, 'default'}
  timeout: 30
  versionFunctions: false
  stage: dev
  region: us-east-1
  iamRoleStatements:
    - Effect: Allow
      Action:
        - "dynamodb:*"
      Resource:
        - Fn::GetAtt: [ DynamoDBTable, Arn ]
        - Fn::Join: ["/", [ Fn::GetAtt: [DynamoDBTable, Arn], "index", "*"]]

# you can define service wide environment variables here
  environment:
    STAGE_NAME: ${self:custom.stageName}
    DYNAMO_TABLE_NAME:
      Ref: DynamoDBTable

# Custom values that can be referenced in the Cloud Formation template
custom:
  stageName: ${opt:stage, self:provider.stage}
  
  
package:
  artifact: bin/release/netcoreapp2.0/deploy-package.zip
  

functions:

  # functions
  list-microb:
    handler: ServerlessApi::Microb.List.Function::LambdaHandler # Assembly::Namespace.ClassName::MethodName
    events:
      - http:
          path: "items"
          method: "get"
  create:
    handler: ServerlessApi::Microb.Create.Function::LambdaHandler
    events:
      - http:
          path: "item"
          method: "post"
  delete:
    handler: ServerlessApi::Microb.Delete.Function::LambdaHandler
    events:
      - http:
          path: "item/{id}"
          method: "delete"
  read:
    handler: ServerlessApi::Microb.Read.Function::LambdaHandler
    events:
      - http:
          path: "item/{id}"
          method: "get"
  update:
    handler: ServerlessApi::Microb.Update.Function::LambdaHandler
    events:
      - http:
          path: "item/{id}"
          method: "put"
    # TODO Add missing functions (Create, Read, Update, Delete)

# you can add CloudFormation resource templates here
resources:
  Parameters: ${file(./infrastructure/microb-table_cfn.yml):Parameters}
  Resources:
    DynamoDBTable: ${file(./infrastructure/microb-table_cfn.yml):Resources.DynamoDBTable}
    
    # TODO include the DynamoDBTable section from the infrastructure/microb-table_cfn.yml file
